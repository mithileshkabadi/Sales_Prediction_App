# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1njDqh5vGrixX9hFe4uXFzMDwtBDpNQgC
"""

import streamlit as st
import pickle
import numpy as np
import pandas as pd

# Load the trained model
with open("xgboost_sales_model.pkl", "rb") as file:
    model = pickle.load(file)

# Initialize or retrieve the predictions DataFrame from session_state
if "prediction_data" not in st.session_state:
    st.session_state.prediction_data = pd.DataFrame(columns=["Iteration", "Predicted Price"])

st.title("Sales Revenue Prediction Dashboard")
st.write("Enter the values to predict revenue.")

# User input fields
unit_price = st.number_input("Unit Price ($)", min_value=0.0, value=10.0)
quantity = st.number_input("Quantity", min_value=1, value=1)
shipping_fee = st.number_input("Shipping Fee ($)", min_value=0.0, value=5.0)

# Categorical inputs
category = st.selectbox("Product Category", ["Electronics", "Accessories", "Wearables", "Unknown"])
region = st.selectbox("Region", ["North", "South", "East", "West", "Unknown"])
shipping_status = st.selectbox("Shipping Status", ["Pending", "Delivered", "Returned", "Unknown"])

# One-hot encode categories
category_encoded = [
    1 if category == "Electronics" else 0, 
    1 if category == "Accessories" else 0,  
    1 if category == "Wearables" else 0,  
    1 if category == "Unknown" else 0  
]

region_encoded = [
    1 if region == "North" else 0, 
    1 if region == "South" else 0, 
    1 if region == "East" else 0, 
    1 if region == "West" else 0,  
    1 if region == "Unknown" else 0  
]

shipping_status_encoded = [
    1 if shipping_status == "Pending" else 0, 
    1 if shipping_status == "Delivered" else 0,  
    1 if shipping_status == "Returned" else 0,  
    1 if shipping_status == "Unknown" else 0  
]

if st.button("Predict Revenue"):
    # Prepare input
    input_data = np.array([[unit_price, quantity, shipping_fee] 
                           + category_encoded 
                           + region_encoded 
                           + shipping_status_encoded])
    # Predict
    prediction = model.predict(input_data)[0]
    st.success(f"Predicted Total Price: ${prediction:.2f}")

    # Save the prediction to session state
    next_iteration = len(st.session_state.prediction_data) + 1
    new_row = pd.DataFrame({
        "Iteration": [next_iteration], 
        "Predicted Price": [prediction]
    })
    
    # Use pd.concat instead of append
    st.session_state.prediction_data = pd.concat(
        [st.session_state.prediction_data, new_row],
        ignore_index=True
    )

    # Show a trend chart
    st.line_chart(
        data=st.session_state.prediction_data.set_index("Iteration")["Predicted Price"],
        height=300
    )



